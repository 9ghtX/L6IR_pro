###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       18/Apr/2019  18:40:32
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\projects\L6IR\programm\L6_pro\protocol_L6IR_encoder_new.c
#    Command line =  
#        E:\projects\L6IR\programm\L6_pro\protocol_L6IR_encoder_new.c -D
#        USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D FR14745600 -D nFR11059200 -D
#        L6IR_CU -D nPT2_MODE -D PT7_MODE -D nTABLE_BAL -D nTNM_MODE -D
#        nSWIR_MODE -D nA3G4250D -D nLPS331AP -D METEO -D nTEST_MODE -D
#        nFLASH_ENABLE -lcN E:\projects\L6IR\programm\L6_pro\Release\List -lb
#        E:\projects\L6IR\programm\L6_pro\Release\List -o
#        E:\projects\L6IR\programm\L6_pro\Release\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\src\ -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\inc\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\inc\ -I
#        nE:\projects\L6IR\programm\L6_pro\CMSIS\CM3\CoreSupport\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Device\ST\STM32L1xx\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\startup\iar\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\include\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\source\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\ -Ol
#    Locale       =  Russian_Russia.1251
#    List file    =  
#        E:\projects\L6IR\programm\L6_pro\Release\List\protocol_L6IR_encoder_new.lst
#    Object file  =  
#        E:\projects\L6IR\programm\L6_pro\Release\Obj\protocol_L6IR_encoder_new.o
#
###############################################################################

E:\projects\L6IR\programm\L6_pro\protocol_L6IR_encoder_new.c
      1          #include "protocol.h"
      2          #include "net.h"
      3          #include "rfu.h"
      4          #include "L6IR.h"
      5          #include "Ball.h"
      6          
      7          extern u8 encoder_plus_buf[ALL_ENCODER_FUNC];
      8          extern u8 encoder_minus_buf[ALL_ENCODER_FUNC];
      9          extern u8 encoder_func_buf[ALL_ENCODER_FUNC+1];
     10          extern u8 encoder0_masks_buf[ALL_ENCODER_FUNC+1];   
     11          extern u8 encoder1_masks_buf[ALL_ENCODER_FUNC+1];
     12          extern u8 ctrl_unit_masks_buf[ALL_ENCODER_FUNC+1];  
     13          extern bool fuck_power_off_command;
     14          extern u8 encoder_func_count;
     15          extern u16 error_counter;
     16          extern bool fuck_next_command;
     17          extern spi_def spi_sets;
     18          u8  device_mode=0;
     19          
     20          void encoder1_func(u8 command)
     21          {
     22            u8 keys_q, code, i;
     23          
     24              switch(command)
     25              {
     26              case GET_KEY_CODE:
     27               u8 i, keys_q, code;
     28               keys_q = pop(&RXbuf);
     29               for(i=0;i<keys_q;i++)
     30                  {
     31                    code = pop(&RXbuf);
     32                    switch(code)
     33                    {
     34                     case ENCODER_PLUS_0:
     35                           senspar.change_par = true;
     36                           push(&keys.keys_stack, KEY_DISTANTS_PLUS);
     37                     break;
     38          
     39                     case ENCODER_MINUS_0:
     40                           senspar.change_par = true;
     41                           push(&keys.keys_stack, KEY_DISTANTS_MINUS);
     42                     break;
     43          
     44                     case KEY_PHOTO://KEY_ENTER:
     45                       push(&keys.keys_stack, KEY_ENTER);
     46                       /*
     47                       device_mode++;
     48                       if(device_mode>=MODES_QUANT)device_mode = 0;
     49                       set_device_mode(device_mode);*/
     50                     break;
     51                     
     52                     case ENCODER_PLUS_PRESS_1:
     53                       keys.buffer[keys.quant+i] = KEY_ENTER_SPECIAL_MENU;
     54                     break;
     55                       
     56                     case KEY_MENU_ENTER:
     57                       keys.buffer[keys.quant+i] = KEY_POWER_OFF;
     58                       
     59                     break;
     60                     
     61                    default:
     62                      
     63                    // keys.buffer[keys.quant+i] = code;// KEY_ENTER;
     64                    break;  
     65                  }
     66                 }
     67              break;
     68              }
     69          }
     70          void encoder1_t_func(u8 command)
     71          {
     72            u8 keys_q, code, i;
     73          
     74              switch(command)
     75              {
     76              case GET_KEY_CODE:
     77               u8 i, keys_q, code;
     78               keys_q = pop(&RXbuf);
     79               for(i=0;i<keys_q;i++)
     80                  {
     81                    code = pop(&RXbuf);
     82                    switch(code)
     83                    {
     84                     case ENCODER_PLUS_0:
     85                           push(&keys.keys_stack, KEY_PLUS);//encoder_plus_buf[encoder_func_count-1];
     86                     break;
     87          
     88                     case ENCODER_MINUS_0:
     89                           push(&keys.keys_stack, KEY_MINUS);//encoder_minus_buf[encoder_func_count-1];
     90                           
     91                     break;
     92          
     93                     case KEY_PHOTO://KEY_ENTER:
     94                       push(&keys.keys_stack, KEY_ENTER);
     95                       /*device_mode++;
     96                       if(device_mode>=MODES_QUANT)device_mode = 0;
     97                       set_device_mode(device_mode);*/
     98                     break;
     99                     
    100                     case ENCODER_PLUS_PRESS_1:
    101                       keys.buffer[keys.quant+i] = KEY_ENTER_SPECIAL_MENU;
    102                     break;
    103                       
    104                     case KEY_MENU_ENTER:
    105                       push(&keys.keys_stack, KEY_POWER_OFF);
    106                       
    107                     break;
    108                     
    109                    default:
    110                      
    111                    // keys.buffer[keys.quant+i] = code;// KEY_ENTER;
    112                    break;  
    113                  }
    114                 }
    115              break;
    116              }
    117          }
    118          
    119          void encoder0_eoc_func(u8 command)
    120          {
    121             u8 keys_q, code, i; 
    122               switch(command)
    123              {
    124          
    125              case GET_KEY_CODE:
    126                
    127               keys_q = pop(&RXbuf);
    128               
    129               for(i=0;i<keys_q;i++)
    130                  {
    131                    code = pop(&RXbuf);
    132                     error_counter = ERROR_WAITING_TIME;
    133            switch(code)
    134              {
    135                     case ENCODER_PLUS_0:
    136                        //senspar.change_par = true;
    137                           push(&keys.keys_stack, KEY_EOC_BRIGHTNES_PLUS);
    138          
    139                     break;
    140          
    141                     case ENCODER_MINUS_0:
    142                        //senspar.change_par = true;
    143                           push(&keys.keys_stack, KEY_EOC_BRIGHTNES_MINUS);
    144          
    145                     break;
    146                
    147              }
    148                  }
    149            break;
    150              }
    151          }
    152          
    153          void encoder0_func(u8 command)
    154          {
    155            u8 keys_q, code, i;
    156            switch(command)
    157              {
    158          
    159              case GET_KEY_CODE:
    160                
    161               keys_q = pop(&RXbuf);
    162               
    163               for(i=0;i<keys_q;i++)
    164                  {
    165                    code = pop(&RXbuf);
    166                     error_counter = ERROR_WAITING_TIME;
    167                    switch(code)
    168                    {
    169                     case ENCODER_PLUS_0:
    170                        //senspar.change_par = true;
    171                           push(&keys.keys_stack, encoder_plus_buf[encoder_func_count-1]);
    172                          fuck_next_command = false;
    173                          fuck_power_off_command = false;
    174                     break;
    175          
    176                     case ENCODER_MINUS_0:
    177                        //senspar.change_par = true;
    178                           push(&keys.keys_stack, encoder_minus_buf[encoder_func_count-1]);
    179                          fuck_next_command = false;
    180                          fuck_power_off_command = false;
    181                     break;
    182          
    183                     case KEY_PHOTO://KEY_ENTER:
    184                       if(!fuck_next_command)
    185                       {
    186                       if(!(0x08&spi_sets.silar_state))
    187                       {
    188                       encoder_func_count++;
    189                       if(encoder_func_count>ALL_ENCODER_FUNC) encoder_func_count=1;
    190                       
    191                       while(!(encoder_func_buf[encoder_func_count]&encoder0_masks_buf[encoder_func_count]))
    192                       {
    193                        encoder_func_count++;
    194                        if(encoder_func_count>ALL_ENCODER_FUNC) encoder_func_count=1;            
    195                       }
    196                       }
    197                        push(&keys.keys_stack, COM_NO_SYMBOL_DISP);
    198                        push(&keys.keys_stack, encoder_func_buf[encoder_func_count]);
    199                       }
    200                       else  push(&keys.keys_stack, NO_ACTION);
    201                       
    202                       fuck_next_command = false;
    203                       fuck_power_off_command = false;
    204                     break;
    205                     
    206                     case ENCODER_PLUS_PRESS_1:
    207                       push(&keys.keys_stack, KEY_ENTER_SPECIAL_MENU);
    208                       fuck_next_command = true;
    209                       fuck_power_off_command = false;
    210                     break;
    211                     
    212                     case ENCODER_MINUS_PRESS_1:
    213                       if(!fuck_next_command)
    214                       {
    215                       push(&keys.keys_stack, KEY_MENU_ENTER);           
    216                       fuck_next_command=true;
    217                       }
    218                       fuck_power_off_command = false;
    219                     break;
    220          
    221                     case KEY_MENU_ENTER:
    222                       if(!fuck_power_off_command) 
    223                       {
    224                         push(&keys.keys_stack, KEY_POWER_OFF);
    225                       fuck_next_command = false;
    226                       }
    227                       //keys.buffer[keys.quant+i] = code;
    228                     break;
    229                    }
    230                  }
    231              break;
    232              }
    233          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   encoder0_eoc_func
        16   -> pop
        16   -> push
      16   encoder0_func
        16   -> pop
        16   -> push
      16   encoder1_func
        16   -> pop
        16   -> push
      16   encoder1_t_func
        16   -> pop
        16   -> push


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       1  device_mode
      80  encoder0_eoc_func
     352  encoder0_func
     148  encoder1_func
     124  encoder1_t_func

 
   1 byte  in section .bss
 756 bytes in section .text
 
 756 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: 8
