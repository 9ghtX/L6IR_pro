###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       18/Apr/2019  18:40:18
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\projects\L6IR\programm\L6_pro\cbuf.c
#    Command line =  
#        E:\projects\L6IR\programm\L6_pro\cbuf.c -D USE_STDPERIPH_DRIVER -D
#        STM32L1XX_MD -D FR14745600 -D nFR11059200 -D L6IR_CU -D nPT2_MODE -D
#        PT7_MODE -D nTABLE_BAL -D nTNM_MODE -D nSWIR_MODE -D nA3G4250D -D
#        nLPS331AP -D METEO -D nTEST_MODE -D nFLASH_ENABLE -lcN
#        E:\projects\L6IR\programm\L6_pro\Release\List -lb
#        E:\projects\L6IR\programm\L6_pro\Release\List -o
#        E:\projects\L6IR\programm\L6_pro\Release\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\src\ -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\inc\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\inc\ -I
#        nE:\projects\L6IR\programm\L6_pro\CMSIS\CM3\CoreSupport\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Device\ST\STM32L1xx\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\startup\iar\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\include\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\source\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\ -Ol
#    Locale       =  Russian_Russia.1251
#    List file    =  E:\projects\L6IR\programm\L6_pro\Release\List\cbuf.lst
#    Object file  =  E:\projects\L6IR\programm\L6_pro\Release\Obj\cbuf.o
#
###############################################################################

E:\projects\L6IR\programm\L6_pro\cbuf.c
      1          /**
      2           * @file cbuf.c
      3           * @date 07.12.2011
      4           * @brief Модуль cbuf 
      5           */
      6          
      7          /**
      8           * @addtogroup __cbuf
      9           * @{
     10           */
     11          
     12          
     13          #include "cbuf.h"
     14          /* ------------------------------------------------------------------ */
     15          /*Локальные функции*/
     16          /* ------------------------------------------------------------------ */
     17          /**
     18           * CbufPush
     19           * @brief Запись в конец буфера.
     20           * @param buf указатель на структуру управления буфером
     21           * @param item элемент для записи в буфер
     22           */
     23          
     24          static void  CbufPush(cbuf_t* const buf, const uint8_t item)
     25          {
     26            buf->base[buf->last] = item;
     27            buf->last++;
     28            buf->count++;
     29            buf->last = buf->last % buf->size; /*wrap*/
     30          //  if (buf->last = buf->size)
     31          //  {
     32          //    buf->last = 0;
     33          //  }
     34          }
     35          
     36          /* ------------------------------------------------------------------ */
     37          /**
     38           * CbufPop
     39           * @brief Извлечь из начала буфера
     40           * @param buf указатель на структуру управления буфером
     41           * @return элемент из начала буфера
     42           */
     43          
     44          static uint8_t CbufPop(cbuf_t* const buf)
     45          {
     46            uint8_t item = buf->base[buf->first];
     47            buf->count--;
     48            buf->first++;
     49            buf->first = buf->first % buf->size;
     50          //  if (buf->first == buf->size)
     51          //  {
     52          //    buf->first = 0;
     53          //  }
     54            return item;
     55          }
     56          /* ------------------------------------------------------------------ */
     57          
     58          /* ------------------------------------------------------------------ */
     59          void CbufInit(cbuf_t* const buf, uint8_t* mem, uint32_t mem_size)
     60          {
     61            buf->base  = mem;
     62            buf->size  = mem_size;
     63            buf->first = 0;
     64            buf->last  = 0;
     65            buf->count = 0;
     66          }
     67          
     68          /* ------------------------------------------------------------------ */
     69          bool CbufWrite(cbuf_t* const buf, const uint8_t* data, const uint32_t data_count)
     70          {
     71            uint8_t i;
     72            bool ret_value = false;
     73            if ( data_count <= (buf->size - buf->count) )
     74            {
     75              for (i = 0; i < data_count; i++)
     76              {
     77                CbufPush(buf, *(data++));
     78              }
     79              ret_value = true;
     80            }
     81            return (ret_value);
     82          }
     83          /* ------------------------------------------------------------------ */
     84          uint32_t CbufRead(cbuf_t* const buf, uint8_t* data, const uint32_t data_count)
     85          {
     86            uint32_t i;
     87            uint32_t len;
     88            len = (data_count < buf->count) ? data_count : buf->count;
     89            for (i = 0; i < len; i++)
     90            {
     91              data[i] = CbufPop(buf);
     92            }
     93            return (i);
     94          }
     95          /* ------------------------------------------------------------------ */
     96          uint8_t CbufTestItem(cbuf_t* const buf, const uint32_t index)
     97          {
     98            uint32_t pos;
     99            uint8_t item;
    100            pos = buf->first + index;
    101            if (pos < buf->size)
    102            {
    103              item = buf->base[pos];
    104            }
    105            else
    106            {
    107              item = buf->base[pos - buf->size];
    108            }
    109            return (item);
    110          }
    111          /* ------------------------------------------------------------------ */
    112          bool CbufPut(cbuf_t* const buf, const uint8_t item)
    113          {
    114            bool ret_value = false;
    115            if (buf->count < buf->size)
    116            {
    117              CbufPush(buf, item);
    118              ret_value = true;
    119            }
    120            return ret_value;
    121          }
    122          /* ------------------------------------------------------------------ */
    123          bool CbufGet(cbuf_t* const buf, uint8_t* destination)
    124          {
    125            bool ret_value = false;
    126            if (0UL != buf->count)
    127            {
    128              *destination = CbufPop(buf);
    129              ret_value = true;
    130            }
    131            return ret_value;
    132          }
    133          /* ------------------------------------------------------------------ */
    134          uint32_t CbufGetItemCount(cbuf_t* const buf)
    135          {
    136            return buf->count;
    137          }
    138          /* ------------------------------------------------------------------ */
    139          uint32_t CbufGetFreeSize(cbuf_t* const buf)
    140          {
    141            return buf->size - buf->count;
    142          }
    143          /* ------------------------------------------------------------------ */
    144          void CbufFlush(cbuf_t* const buf)
    145          {
    146            buf->count = 0;
    147            buf->first = buf->last;
    148          }
    149          /* ------------------------------------------------------------------ */
    150          
    151          /**
    152           * @} __cbuf
    153           */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CbufFlush
       8   CbufGet
         8   -> CbufPop
       0   CbufGetFreeSize
       0   CbufGetItemCount
       0   CbufInit
       4   CbufPop
       0   CbufPush
       8   CbufPut
         8   -> CbufPush
      24   CbufRead
        24   -> CbufPop
       0   CbufTestItem
      24   CbufWrite
        24   -> CbufPush


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      10  CbufFlush
      28  CbufGet
       8  CbufGetFreeSize
       4  CbufGetItemCount
      18  CbufInit
      42  CbufPop
      34  CbufPush
      28  CbufPut
      38  CbufRead
      28  CbufTestItem
      48  CbufWrite

 
 286 bytes in section .text
 
 286 bytes of CODE memory

Errors: none
Warnings: none
