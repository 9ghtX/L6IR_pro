###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Apr/2019  12:09:19
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Device\ST\STM32L1xx\Source\Templates\system_stm32l1xx.c
#    Command line =  
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Device\ST\STM32L1xx\Source\Templates\system_stm32l1xx.c
#        -D USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D FR14745600 -D nFR11059200
#        -D L6IR_CU -D nPT2_MODE -D PT7_MODE -D nTABLE_BAL -D nTNM_MODE -D
#        nSWIR_MODE -D nA3G4250D -D nLPS331AP -D METEO -D nTEST_MODE -D
#        nFLASH_ENABLE -lcN E:\projects\L6IR\programm\L6_pro\Release\List -lb
#        E:\projects\L6IR\programm\L6_pro\Release\List -o
#        E:\projects\L6IR\programm\L6_pro\Release\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\src\ -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\inc\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\inc\ -I
#        nE:\projects\L6IR\programm\L6_pro\CMSIS\CM3\CoreSupport\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Device\ST\STM32L1xx\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\startup\iar\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\include\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\source\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\ -Ol
#    Locale       =  Russian_Russia.1251
#    List file    =  
#        E:\projects\L6IR\programm\L6_pro\Release\List\system_stm32l1xx.lst
#    Object file  =  
#        E:\projects\L6IR\programm\L6_pro\Release\Obj\system_stm32l1xx.o
#
###############################################################################

E:\projects\L6IR\programm\L6_pro\CMSIS\Device\ST\STM32L1xx\Source\Templates\system_stm32l1xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32l1xx.c
      4            * @author  MCD Application Team
      5            * @version V1.1.1
      6            * @date    09-March-2012
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32L1xx Ultra
      9            *          Low Power devices, and is generated by the clock configuration
     10            *          tool "STM32L1xx_Clock_Configuration_V1.1.0.xls".
     11            *
     12            * 1.  This file provides two functions and one global variable to be called from
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool.
     17            *                      This function is called at startup just after reset and
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32l1xx_xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick
     23            *                                  timer or configure other parameters.
     24            *
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the MSI (2.1 MHz Range) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32l1xx_xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and MSI still used as system clock source. User can
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     38            *    in "stm32l1xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *                         System Clock Configuration
     45            *=============================================================================
     46            *        System Clock source          | HSE
     47            *-----------------------------------------------------------------------------
     48            *        SYSCLK                       | HSE
     49            *-----------------------------------------------------------------------------
     50            *        HCLK                         | HSE
     51            *-----------------------------------------------------------------------------
     52            *        AHB Prescaler                | 1
     53            *-----------------------------------------------------------------------------
     54            *        APB1 Prescaler               | 1
     55            *-----------------------------------------------------------------------------
     56            *        APB2 Prescaler               | 1
     57            *-----------------------------------------------------------------------------
     58            *        HSE Frequency                | 14745600 Hz 11059200
     59            *-----------------------------------------------------------------------------
     60            *        PLL DIV                      | 1
     61            *-----------------------------------------------------------------------------
     62            *        PLL MUL                      | 1
     63            *-----------------------------------------------------------------------------
     64            *        VDD                          | 3.3 V
     65            *-----------------------------------------------------------------------------
     66            *        Vcore                        | 1.8 V (Range 1)
     67            *-----------------------------------------------------------------------------
     68            *        Flash Latency                | 1 WS
     69            *-----------------------------------------------------------------------------
     70            *        SDIO clock (SDIOCLK)         | 48000000 Hz
     71            *-----------------------------------------------------------------------------
     72            *        Require 48MHz for USB clock  | Disabled
     73            *-----------------------------------------------------------------------------
     74            *=============================================================================
     75            ******************************************************************************
     76            * @attention
     77            *
     78            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     79            *
     80            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     81            * You may not use this file except in compliance with the License.
     82            * You may obtain a copy of the License at:
     83            *
     84            *        http://www.st.com/software_license_agreement_liberty_v2
     85            *
     86            * Unless required by applicable law or agreed to in writing, software
     87            * distributed under the License is distributed on an "AS IS" BASIS,
     88            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     89            * See the License for the specific language governing permissions and
     90            * limitations under the License.
     91            *
     92            ******************************************************************************
     93            */
     94          
     95          /** @addtogroup CMSIS
     96            * @{
     97            */
     98          
     99          /** @addtogroup stm32l1xx_system
    100            * @{
    101            */
    102          
    103          /** @addtogroup STM32L1xx_System_Private_Includes
    104            * @{
    105            */
    106          
    107          #include "stm32l1xx.h"
    108          
    109          /**
    110            * @}
    111            */
    112          
    113          /** @addtogroup STM32L1xx_System_Private_TypesDefinitions
    114            * @{
    115            */
    116          
    117          /**
    118            * @}
    119            */
    120          
    121          /** @addtogroup STM32L1xx_System_Private_Defines
    122            * @{
    123            */
    124          
    125          /*!< Uncomment the following line if you need to use external SRAM mounted
    126               on STM32L152D_EVAL board as data memory  */
    127          /* #define DATA_IN_ExtSRAM */
    128          
    129          /*!< Uncomment the following line if you need to relocate your vector Table in
    130               Internal SRAM. */
    131          /* #define VECT_TAB_SRAM */
    132          #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field.
    133                                            This value must be a multiple of 0x200. */
    134          /**
    135            * @}
    136            */
    137          
    138          /** @addtogroup STM32L1xx_System_Private_Macros
    139            * @{
    140            */
    141          
    142          /**
    143            * @}
    144            */
    145          
    146          /** @addtogroup STM32L1xx_System_Private_Variables
    147            * @{
    148            */
    149          
    150          
    151          
    152          #ifdef FR14745600
    153                 uint32_t SystemCoreClock = 14745600;  // 4000000;
    154          #elif  FR11059200
    155                 uint32_t SystemCoreClock = 11059200;  // 4000000;
    156          #endif
    157          
    158          __I uint8_t PLLMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
    159          __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    160          
    161          /**
    162            * @}
    163            */
    164          
    165          /** @addtogroup STM32L1xx_System_Private_FunctionPrototypes
    166            * @{
    167            */
    168          #ifdef NO_EXTERNAL_XTAL
    169          static void SetSysClockToHSI(void);
    170          #endif
    171          
    172          static void SetSysClock(void);
    173          
    174          
    175          #ifdef DATA_IN_ExtSRAM
    176            static void SystemInit_ExtMemCtl(void);
    177          #endif /* DATA_IN_ExtSRAM */
    178          
    179          /**
    180            * @}
    181            */
    182          
    183          /** @addtogroup STM32L1xx_System_Private_Functions
    184            * @{
    185            */
    186          
    187          /**
    188            * @brief  Setup the microcontroller system.
    189            *         Initialize the Embedded Flash Interface, the PLL and update the
    190            *         SystemCoreClock variable.
    191            * @param  None
    192            * @retval None
    193            */
    194          void SystemInit (void)
    195          {
    196            /*!< Set MSION bit */
    197            RCC->CR |= (uint32_t)0x00000100;
    198          
    199            /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
    200            RCC->CFGR &= (uint32_t)0x88FFC00C;
    201          
    202            /*!< Reset HSION, HSEON, CSSON and PLLON bits */
    203            RCC->CR &= (uint32_t)0xEEFEFFFE;
    204          
    205              /*!< Set HSEON, PLLON bits */
    206          //  RCC->CR |= (uint32_t)0x01010000;
    207          
    208            /*!< Reset HSEBYP bit */
    209          //  RCC->CR &= (uint32_t)0xFFFBFFFF;
    210          
    211              /*!< Set HSEBYP bit */
    212            RCC->CR |= (uint32_t)0x00040000;
    213          
    214            /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
    215            RCC->CFGR &= (uint32_t)0xFF02FFFF;
    216          
    217            /*!< Disable all interrupts */
    218            RCC->CIR = 0x00000000;
    219          
    220          #ifdef DATA_IN_ExtSRAM
    221            SystemInit_ExtMemCtl();
    222          #endif /* DATA_IN_ExtSRAM */
    223          
    224            /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
    225            SetSysClock();
    226            //SetSysClockToHSI();
    227            
    228          #ifdef VECT_TAB_SRAM
    229            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
    230          #else
    231            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
    232          #endif
    233          }
    234          
    235          /**
    236            * @brief  Update SystemCoreClock according to Clock Register Values
    237            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    238            *         be used by the user application to setup the SysTick timer or configure
    239            *         other parameters.
    240            *
    241            * @note   Each time the core clock (HCLK) changes, this function must be called
    242            *         to update SystemCoreClock variable value. Otherwise, any configuration
    243            *         based on this variable will be incorrect.
    244            *
    245            * @note   - The system frequency computed by this function is not the real
    246            *           frequency in the chip. It is calculated based on the predefined
    247            *           constant and the selected clock source:
    248            *
    249            *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI
    250            *             value as defined by the MSI range.
    251            *
    252            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    253            *
    254            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    255            *
    256            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    257            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    258            *
    259            *         (*) HSI_VALUE is a constant defined in stm32l1xx.h file (default value
    260            *             16 MHz) but the real value may vary depending on the variations
    261            *             in voltage and temperature.
    262            *
    263            *         (**) HSE_VALUE is a constant defined in stm32l1xx.h file (default value
    264            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    265            *              frequency of the crystal used. Otherwise, this function may
    266            *              have wrong result.
    267            *
    268            *         - The result of this function could be not correct when using fractional
    269            *           value for HSE crystal.
    270            * @param  None
    271            * @retval None
    272            */
    273          void SystemCoreClockUpdate (void)
    274          {
    275            uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
    276          
    277            /* Get SYSCLK source -------------------------------------------------------*/
    278            tmp = RCC->CFGR & RCC_CFGR_SWS;
    279          
    280            switch (tmp)
    281            {
    282              case 0x00:  /* MSI used as system clock */
    283                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
    284                SystemCoreClock = (32768 * (1 << (msirange + 1)));
    285                break;
    286              case 0x04:  /* HSI used as system clock */
    287                SystemCoreClock = HSI_VALUE;
    288                break;
    289              case 0x08:  /* HSE used as system clock */
    290                SystemCoreClock = HSE_VALUE;
    291                break;
    292              case 0x0C:  /* PLL used as system clock */
    293                /* Get PLL clock source and multiplication factor ----------------------*/
    294                pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
    295                plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
    296                pllmul = PLLMulTable[(pllmul >> 18)];
    297                plldiv = (plldiv >> 22) + 1;
    298          
    299                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
    300          
    301                if (pllsource == 0x00)
    302                {
    303                  /* HSI oscillator clock selected as PLL clock entry */
    304                  SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
    305                }
    306                else
    307                {
    308                  /* HSE selected as PLL clock entry */
    309                  SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
    310                }
    311                break;
    312              default: /* MSI used as system clock */
    313                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
    314                SystemCoreClock = (32768 * (1 << (msirange + 1)));
    315                break;
    316            }
    317            /* Compute HCLK clock frequency --------------------------------------------*/
    318            /* Get HCLK prescaler */
    319            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    320            /* HCLK clock frequency */
    321            SystemCoreClock >>= tmp;
    322          }
    323          
    324          #if 0
    325          void SetSysClockToHSI(void)
    326          {
    327            __IO uint32_t StartUpCounter = 0, HSIStatus = 0;
    328            /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
    329            /* Enable HSI */
    330            RCC->CR |= ((uint32_t)RCC_CR_HSION);
    331          
    332            /* Wait till HSI is ready and if Time out is reached exit */
    333            do
    334            {
    335              HSIStatus = RCC->CR & RCC_CR_HSIRDY;
    336              StartUpCounter++;
    337            } while((HSIStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    338          
    339            if ((RCC->CR & RCC_CR_HSIRDY) != RESET)
    340            {
    341              HSIStatus = (uint32_t)0x01;
    342            }
    343            else
    344            {
    345              HSIStatus = (uint32_t)0x00;
    346            }
    347          
    348            if (HSIStatus == (uint32_t)0x01)
    349            {
    350              /* Enable 64-bit access */
    351              FLASH->ACR |= FLASH_ACR_ACC64;
    352          
    353              /* Enable Prefetch Buffer */
    354              FLASH->ACR |= FLASH_ACR_PRFTEN;
    355          
    356              /* Flash 1 wait state */
    357              FLASH->ACR |= FLASH_ACR_LATENCY;
    358          
    359              /* Enable the PWR APB1 Clock */
    360              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    361          
    362              /* Select the Voltage Range 1 (1.8V) */
    363              PWR->CR = PWR_CR_VOS_0;
    364          
    365              /* Wait Until the Voltage Regulator is ready */
    366              while((PWR->CSR & PWR_CSR_VOSF) != RESET)
    367              {
    368              }
    369          
    370              /* HCLK = SYSCLK */
    371              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1; //8Mhz //AHB
    372          
    373              /* PCLK2 = HCLK */
    374              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1; // 8Mhz APB2
    375          
    376              /* PCLK1 = HCLK */
    377              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;  //8Mhz //APB1
    378          
    379          
    380              /* Select HSI as system clock source */
    381             RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    382             RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;
    383          
    384             /* Wait till HSI is used as system clock source */
    385             while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
    386             {
    387             }
    388            }
    389            else
    390            {
    391              /* If HSI fails to start-up, the application will have wrong clock
    392                 configuration. User can add here some code to deal with this error */
    393            }
    394          }
    395          #endif
    396          
    397          /**
    398            * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
    399            *         settings.
    400            * @note   This function should be called only once the RCC clock configuration
    401            *         is reset to the default reset state (done in SystemInit() function).
    402            * @param  None
    403            * @retval None
    404            */
    405          static void SetSysClock(void)
    406          {
    407            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    408          
    409            /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
    410            /* Enable HSE */
    411            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    412          
    413            /* Wait till HSE is ready and if Time out is reached exit */
    414            do
    415            {
    416              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    417              StartUpCounter++;
    418            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    419          
    420            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    421            {
    422              HSEStatus = (uint32_t)0x01;
    423            }
    424            else
    425            {
    426              HSEStatus = (uint32_t)0x00;
    427            }
    428          
    429            if (HSEStatus == (uint32_t)0x01)
    430            {
    431              /* Enable 64-bit access */
    432              FLASH->ACR |= FLASH_ACR_ACC64;
    433          
    434              /* Enable Prefetch Buffer */
    435              FLASH->ACR |= FLASH_ACR_PRFTEN;
    436          
    437              /* Flash 1 wait state */
    438              FLASH->ACR |= FLASH_ACR_LATENCY;
    439          
    440              /* Power enable */
    441              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    442          
    443              /* Select the Voltage Range 1 (1.8 V) */
    444              PWR->CR = PWR_CR_VOS_0;
    445          
    446              /* Wait Until the Voltage Regulator is ready */
    447              while((PWR->CSR & PWR_CSR_VOSF) != RESET)
    448              {
    449              }
    450          
    451              /* HCLK = SYSCLK /1*/
    452              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    453          
    454              /* PCLK2 = HCLK /1*/
    455              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
    456          
    457              /* PCLK1 = HCLK /1*/
    458              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
    459          #if 0
    460              /*  PLL configuration */
    461              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
    462                                                  RCC_CFGR_PLLDIV));
    463              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
    464          
    465              /* Enable PLL */
    466              RCC->CR |= RCC_CR_PLLON;
    467          
    468              /* Wait till PLL is ready */
    469              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    470              {
    471              }
    472          
    473              /* Select PLL as system clock source */
    474              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    475              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
    476          
    477              /* Wait till PLL is used as system clock source */
    478              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
    479              {
    480              }
    481          #else
    482              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    483              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;
    484              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_HSE)
    485              {
    486              }
    487          #endif
    488            }
    489            else
    490            {
    491              /* If HSE fails to start-up, the application will have wrong clock
    492                 configuration. User can add here some code to deal with this error */
    493            }
    494          }
    495          
    496          
    497          
    498          
    499          #ifdef DATA_IN_ExtSRAM
    500          /**
    501            * @brief  Setup the external memory controller.
    502            *         Called in SystemInit() function before jump to main.
    503            *         This function configures the external SRAM mounted on STM32L152D_EVAL board
    504            *         This SRAM will be used as program data memory (including heap and stack).
    505            * @param  None
    506            * @retval None
    507            */
    508          void SystemInit_ExtMemCtl(void)
    509          {
    510          /*-- GPIOs Configuration -----------------------------------------------------*/
    511          /*
    512           +-------------------+--------------------+------------------+------------------+
    513           +                       SRAM pins assignment                                   +
    514           +-------------------+--------------------+------------------+------------------+
    515           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    516           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    517           | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    518           | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    519           | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    520           | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    521           | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG10<-> FSMC_NE2 |
    522           | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    523           | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 |
    524           | PD13 <-> FSMC_A18 | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 |
    525           | PD14 <-> FSMC_D0  | PE15 <-> FSMC_D12  |------------------+
    526           | PD15 <-> FSMC_D1  |--------------------+
    527           +-------------------+
    528          */
    529          
    530            /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    531            RCC->AHBENR   = 0x000080D8;
    532          
    533            /* Connect PDx pins to FSMC Alternate function */
    534            GPIOD->AFR[0]  = 0x00CC00CC;
    535            GPIOD->AFR[1]  = 0xCCCCCCCC;
    536            /* Configure PDx pins in Alternate function mode */
    537            GPIOD->MODER   = 0xAAAA0A0A;
    538            /* Configure PDx pins speed to 40 MHz */
    539            GPIOD->OSPEEDR = 0xFFFF0F0F;
    540            /* Configure PDx pins Output type to push-pull */
    541            GPIOD->OTYPER  = 0x00000000;
    542            /* No pull-up, pull-down for PDx pins */
    543            GPIOD->PUPDR   = 0x00000000;
    544          
    545            /* Connect PEx pins to FSMC Alternate function */
    546            GPIOE->AFR[0]  = 0xC00000CC;
    547            GPIOE->AFR[1]  = 0xCCCCCCCC;
    548            /* Configure PEx pins in Alternate function mode */
    549            GPIOE->MODER   = 0xAAAA800A;
    550            /* Configure PEx pins speed to 40 MHz */
    551            GPIOE->OSPEEDR = 0xFFFFC00F;
    552            /* Configure PEx pins Output type to push-pull */
    553            GPIOE->OTYPER  = 0x00000000;
    554            /* No pull-up, pull-down for PEx pins */
    555            GPIOE->PUPDR   = 0x00000000;
    556          
    557            /* Connect PFx pins to FSMC Alternate function */
    558            GPIOF->AFR[0]  = 0x00CCCCCC;
    559            GPIOF->AFR[1]  = 0xCCCC0000;
    560            /* Configure PFx pins in Alternate function mode */
    561            GPIOF->MODER   = 0xAA000AAA;
    562            /* Configure PFx pins speed to 40 MHz */
    563            GPIOF->OSPEEDR = 0xFF000FFF;
    564            /* Configure PFx pins Output type to push-pull */
    565            GPIOF->OTYPER  = 0x00000000;
    566            /* No pull-up, pull-down for PFx pins */
    567            GPIOF->PUPDR   = 0x00000000;
    568          
    569            /* Connect PGx pins to FSMC Alternate function */
    570            GPIOG->AFR[0]  = 0x00CCCCCC;
    571            GPIOG->AFR[1]  = 0x00000C00;
    572            /* Configure PGx pins in Alternate function mode */
    573            GPIOG->MODER   = 0x00200AAA;
    574            /* Configure PGx pins speed to 40 MHz */
    575            GPIOG->OSPEEDR = 0x00300FFF;
    576            /* Configure PGx pins Output type to push-pull */
    577            GPIOG->OTYPER  = 0x00000000;
    578            /* No pull-up, pull-down for PGx pins */
    579            GPIOG->PUPDR   = 0x00000000;
    580          
    581          /*-- FSMC Configuration ------------------------------------------------------*/
    582            /* Enable the FSMC interface clock */
    583            RCC->AHBENR    = 0x400080D8;
    584          
    585            /* Configure and enable Bank1_SRAM3 */
    586            FSMC_Bank1->BTCR[4]  = 0x00001011;
    587            FSMC_Bank1->BTCR[5]  = 0x00000300;
    588            FSMC_Bank1E->BWTR[4] = 0x0FFFFFFF;
    589          /*
    590            Bank1_SRAM3 is configured as follow:
    591          
    592            p.FSMC_AddressSetupTime = 0;
    593            p.FSMC_AddressHoldTime = 0;
    594            p.FSMC_DataSetupTime = 3;
    595            p.FSMC_BusTurnAroundDuration = 0;
    596            p.FSMC_CLKDivision = 0;
    597            p.FSMC_DataLatency = 0;
    598            p.FSMC_AccessMode = FSMC_AccessMode_A;
    599          
    600            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
    601            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    602            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
    603            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    604            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    605            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
    606            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    607            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    608            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    609            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    610            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    611            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    612            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    613            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    614            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    615          
    616            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
    617          
    618            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
    619          */
    620          
    621          }
    622          #endif /* DATA_IN_ExtSRAM */
    623          
    624          /**
    625            * @}
    626            */
    627          
    628          /**
    629            * @}
    630            */
    631          
    632          /**
    633            * @}
    634            */
    635          
    636          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetSysClock
       0   SystemCoreClockUpdate
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
      12  PLLMulTable
     204  SetSysClock
       4  SystemCoreClock
     200  SystemCoreClockUpdate
      82  SystemInit

 
  32 bytes in section .data
 546 bytes in section .text
 
 546 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
