###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       18/Apr/2019  18:40:31
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\projects\L6IR\programm\L6_pro\protocol_L6IR.c
#    Command line =  
#        E:\projects\L6IR\programm\L6_pro\protocol_L6IR.c -D
#        USE_STDPERIPH_DRIVER -D STM32L1XX_MD -D FR14745600 -D nFR11059200 -D
#        L6IR_CU -D nPT2_MODE -D PT7_MODE -D nTABLE_BAL -D nTNM_MODE -D
#        nSWIR_MODE -D nA3G4250D -D nLPS331AP -D METEO -D nTEST_MODE -D
#        nFLASH_ENABLE -lcN E:\projects\L6IR\programm\L6_pro\Release\List -lb
#        E:\projects\L6IR\programm\L6_pro\Release\List -o
#        E:\projects\L6IR\programm\L6_pro\Release\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\src\ -I
#        E:\projects\L6IR\programm\L6_pro\STM32L1xx_StdPeriph_Driver\inc\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\inc\ -I
#        nE:\projects\L6IR\programm\L6_pro\CMSIS\CM3\CoreSupport\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Device\ST\STM32L1xx\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\mcu\startup\iar\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\include\ -I
#        E:\projects\L6IR\programm\L6_pro\rfu_stm32\source\ -I
#        E:\projects\L6IR\programm\L6_pro\CMSIS\Include\ -I
#        E:\projects\L6IR\programm\L6_pro\ -Ol
#    Locale       =  Russian_Russia.1251
#    List file    =  
#        E:\projects\L6IR\programm\L6_pro\Release\List\protocol_L6IR.lst
#    Object file  =  
#        E:\projects\L6IR\programm\L6_pro\Release\Obj\protocol_L6IR.o
#
###############################################################################

E:\projects\L6IR\programm\L6_pro\protocol_L6IR.c
      1          #ifdef L6IR_CU
      2          
      3          #include "protocol.h"
      4          #include "net.h"
      5          #include "rfu.h"
      6          #include "L6IR.h"
      7          #include "Ball.h"
      8          
      9          extern Sens_param senspar;
     10          extern u16 counter_sys;
     11          
     12          Buf_Head	 TXbuf,RXbuf, keyBuf;
     13           bool     rs_frame;
     14          encoder encoder0, encoder1;
     15          bool fuck_power_off_command = true;
     16          extern spi_def spi_sets;
     17          
     18          //#define MASK_OFF         0x00
     19          //#define MASK_ON          0xFF
     20          
     21           u8 encoder_plus_buf[ALL_ENCODER_FUNC]=  {KEY_DISTANTS_PLUS, KEY_BRIGHTNES_PLUS, ENCODER_PLUS_ZOOM, KEY_POSITIVE, KEY_PALETTE_PLUS, KEY_LEGIBILITY_PLUS, KEY_MARKS_BRIGHTNES_PLUS, KEY_EOC_BRIGHTNES_PLUS, KEY_EXPOSSITION_PLUS, KEY_TEMPERATURE_PLUS, KEY_PRESSURE_PLUS};
     22           u8 encoder_minus_buf[ALL_ENCODER_FUNC]= {KEY_DISTANTS_MINUS, KEY_BRIGHTNES_MINUS, ENCODER_MINUS_ZOOM, KEY_NEGATIVE, KEY_PALETTE_MINUS, KEY_LEGIBILITY_MINUS,KEY_MARKS_BRIGHTNES_MINUS, KEY_EOC_BRIGHTNES_MINUS, KEY_EXPOSSITION_MINUS,KEY_TEMPERATURE_MINUS, KEY_PRESSURE_MINUS};
     23           u8 encoder_func_buf[ALL_ENCODER_FUNC+1]=  {COM_NO_SYMBOL_DISP, COM_DISTANTS_DISP, COM_BRIGHTNES_DISP, COM_ZOOM_DISP, COM_POS_NEG_DISP, COM_POLETTE_DISP, COM_LIGIBILITY_DISP, COM_MARKS_BRIGHTNES_DISP, COM_EOC_BRIGHTNES_DISP, COM_EXPOSSITION_DISP, COM_TEMPERATURE_DISP, COM_PRESSURE_DISP};
     24           u8 encoder0_masks_buf[ALL_ENCODER_FUNC+1]   ={MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON};
     25           u8 encoder1_masks_buf[ALL_ENCODER_FUNC+1]   ={MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON};
     26           u8 ctrl_unit_masks_buf[ALL_ENCODER_FUNC+1]  ={MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON, MASK_ON};
     27           u8 encoder_func_count;
     28          
     29          u16 error_counter;
     30          
     31          
     32          bool fuck_next_command = false;
     33          
     34          void func_buffer_ini()
     35          {
     36           encoder_plus_buf[DISTANTS_FUNC_NUM-1] = KEY_DISTANTS_PLUS;
     37           encoder_plus_buf[BRIGHTNES_FUNC_NUM-1] = KEY_BRIGHTNES_PLUS;
     38           encoder_plus_buf[ZOOM_FUNC_NUM-1] = ENCODER_PLUS_ZOOM;
     39           encoder_plus_buf[POS_NEG_FUNC_NUM-1] = KEY_POSITIVE;
     40           encoder_plus_buf[POLETTE_FUNC_NUM-1] = KEY_PALETTE_PLUS;
     41           encoder_plus_buf[LIGIBILITY_FUNC_NUM-1] = KEY_LEGIBILITY_PLUS;
     42           encoder_plus_buf[MARKS_BRIGHTNES_FUNC_NUM-1] =  KEY_MARKS_BRIGHTNES_PLUS;
     43           encoder_plus_buf[EOC_BRIGHTNES_FUNC_NUM-1] = KEY_EOC_BRIGHTNES_PLUS;
     44           encoder_plus_buf[EXPOSSITION_FUNC_NUM-1] = KEY_EXPOSSITION_PLUS;
     45           encoder_plus_buf[TEMP_ENTER_FUNC_NUM -1] = KEY_TEMPERATURE_PLUS;
     46           encoder_plus_buf[PRESS_ENTER_FUNC_NUM -1] = KEY_PRESSURE_PLUS;
     47           
     48           encoder_minus_buf[DISTANTS_FUNC_NUM-1] = KEY_DISTANTS_MINUS;
     49           encoder_minus_buf[BRIGHTNES_FUNC_NUM-1] = KEY_BRIGHTNES_MINUS;
     50           encoder_minus_buf[ZOOM_FUNC_NUM-1] = ENCODER_MINUS_ZOOM;
     51           encoder_minus_buf[POS_NEG_FUNC_NUM-1] = KEY_NEGATIVE;
     52           encoder_minus_buf[POLETTE_FUNC_NUM-1] = KEY_PALETTE_MINUS;
     53           encoder_minus_buf[LIGIBILITY_FUNC_NUM-1] = KEY_LEGIBILITY_MINUS;
     54           encoder_minus_buf[MARKS_BRIGHTNES_FUNC_NUM-1] = KEY_MARKS_BRIGHTNES_MINUS;
     55           encoder_minus_buf[EOC_BRIGHTNES_FUNC_NUM-1] = KEY_EOC_BRIGHTNES_MINUS;
     56           encoder_minus_buf[EXPOSSITION_FUNC_NUM-1] = KEY_EXPOSSITION_MINUS;
     57           encoder_minus_buf[TEMP_ENTER_FUNC_NUM -1] =  KEY_TEMPERATURE_MINUS;
     58           encoder_minus_buf[PRESS_ENTER_FUNC_NUM -1] =  KEY_PRESSURE_MINUS;
     59           
     60           encoder_func_buf[DISTANTS_FUNC_NUM] = COM_DISTANTS_DISP;
     61           encoder_func_buf[BRIGHTNES_FUNC_NUM] = COM_BRIGHTNES_DISP;
     62           encoder_func_buf[ZOOM_FUNC_NUM] = COM_ZOOM_DISP;
     63           encoder_func_buf[POS_NEG_FUNC_NUM] = COM_POS_NEG_DISP;
     64           encoder_func_buf[POLETTE_FUNC_NUM] = COM_POLETTE_DISP;
     65           encoder_func_buf[LIGIBILITY_FUNC_NUM] = COM_LIGIBILITY_DISP;
     66           encoder_func_buf[MARKS_BRIGHTNES_FUNC_NUM] = COM_MARKS_BRIGHTNES_DISP;
     67           encoder_func_buf[EOC_BRIGHTNES_FUNC_NUM] = COM_EOC_BRIGHTNES_DISP;
     68           encoder_func_buf[EXPOSSITION_FUNC_NUM] = COM_EXPOSSITION_DISP;
     69           encoder_func_buf[TEMP_ENTER_FUNC_NUM] = COM_TEMPERATURE_DISP;
     70           encoder_func_buf[PRESS_ENTER_FUNC_NUM] =   COM_PRESSURE_DISP;
     71          }
     72          
     73          void encoder_func_ini()
     74          {
     75                encoder_func_count=1; //
     76                keys.buffer[keys.quant] = encoder_func_buf[encoder_func_count];
     77                keys.quant++;
     78          }
     79          
     80          
     81          
     82           void protocol()
     83          {
     84           bool st;
     85           u8 command, adress;
     86           u8 i, keys_q,dop_symb=0,code;
     87           del_stsp(&RXbuf);
     88           st = check_crc(&RXbuf);
     89           adress = pop(&RXbuf);
     90           command = pop(&RXbuf);
     91          // error_counter = ERROR_WAITING_TIME;
     92          
     93          if(adress == ADRESS_CU)
     94           {
     95             error_counter = ERROR_WAITING_TIME;
     96              switch(command)
     97              {
     98              case GET_KEY_CODE:
     99               keys_q = pop(&RXbuf);
    100               for(i=0;i<keys_q;i++)
    101                  {
    102                    code = pop(&RXbuf);
    103                    switch(code)
    104                    {
    105                     case ENCODER_PLUS_0:
    106                           push(&keys.keys_stack, encoder_plus_buf[encoder_func_count-1]);
    107                     break;
    108          
    109                     case ENCODER_MINUS_0:
    110                           push(&keys.keys_stack, encoder_minus_buf[encoder_func_count-1]);
    111                     break;
    112          
    113                     case KEY_ENTER:
    114                                    if(!fuck_next_command)
    115                       {
    116                       if(!(0x08&spi_sets.silar_state))
    117                       {
    118                       encoder_func_count++;
    119                       if(encoder_func_count>ALL_ENCODER_FUNC) encoder_func_count=1;
    120                       
    121                       while(!(encoder_func_buf[encoder_func_count]&encoder0_masks_buf[encoder_func_count]))
    122                       {
    123                        encoder_func_count++;
    124                        if(encoder_func_count>ALL_ENCODER_FUNC) encoder_func_count=1;            
    125                       }
    126                       }
    127                        push(&keys.keys_stack, COM_NO_SYMBOL_DISP);
    128                        push(&keys.keys_stack, encoder_func_buf[encoder_func_count]);
    129                       }
    130                       else  push(&keys.keys_stack, NO_ACTION);
    131                       
    132                       fuck_next_command = false;
    133                       fuck_power_off_command = false;
    134          //             encoder_func_count++;
    135          //             if(encoder_func_count>ALL_ENCODER_FUNC) encoder_func_count=1;
    136          //             if(encoder_func_count<2) encoder_func_count=1; //
    137          //             push(&keys.keys_stack, encoder_func_buf[encoder_func_count]);
    138                     break;
    139          
    140                     case KEY_MENU_ENTER:
    141                        push(&keys.keys_stack, code);
    142                     break;
    143          
    144                     case KEY_ENCODER_PRESS:
    145                        push(&keys.keys_stack, KEY_POWER_OFF);
    146                     break;
    147          
    148                     case KEY_ENCODER1:
    149                        push(&keys.keys_stack, KEY_ENTER);
    150                     break;
    151          
    152          
    153                     case KEY_PHOTO:
    154                        push(&keys.keys_stack, code);
    155                     break;
    156          
    157                     case KEY_ID:
    158                        push(&keys.keys_stack, KEY_ID);
    159                     break;
    160          
    161                     case KEY_PLUS:
    162                         push(&keys.keys_stack,  KEY_PLUS);
    163                     break;
    164          
    165                     case KEY_MINUS:
    166                         push(&keys.keys_stack, KEY_MINUS);
    167                     break;
    168                     
    169                     case ENCODER_PLUS_PRESS_1:
    170                       push(&keys.keys_stack, KEY_ENTER_SPECIAL_MENU);
    171                       fuck_next_command = true;
    172                       fuck_power_off_command = false;
    173                     break;
    174                     
    175                     case ENCODER_MINUS_PRESS_1:
    176                       if(!fuck_next_command)
    177                       {
    178                       push(&keys.keys_stack, KEY_MENU_ENTER);           
    179                       fuck_next_command=true;
    180                       }
    181                       fuck_power_off_command = false;
    182                     break;
    183                    }
    184                  }
    185               keys.quant+=keys_q;
    186              break;
    187          
    188          
    189              case CONDISSION_REQUEST:
    190                   net_init();
    191              break;
    192              }
    193           }
    194          
    195          if(adress == ADRESS_EXT_MASTER)
    196            {
    197              switch(command)
    198              {
    199                case EXT_MASTER_REQUEST:
    200                     net_set_default(NET_SLAVE);
    201                break;
    202                
    203                case EXT_MASTER_RFU_START:
    204                  rfu_start();
    205                break;
    206              }
    207            }
    208          
    209          
    210          if(adress == ADRESS_GPS)
    211          {
    212            switch(command)
    213            {
    214              case GET_GPS_DATA:
    215          
    216              break;
    217            }
    218          }
    219          
    220          if(adress == ADRESS_METEO)
    221            {
    222              u8* data;
    223              switch(command)
    224              {
    225              case GET_TEMPERATURE_DATA:
    226               float temper;
    227               float* temper_point;
    228               temper_point = &temper;
    229                data = (u8*)temper_point;
    230               *(data+0) = pop(&RXbuf);
    231               *(data+1) = pop(&RXbuf);
    232               *(data+2) = pop(&RXbuf);
    233               *(data+3) = pop(&RXbuf);
    234               temper = temper -5;
    235               if(senspar.temp_auto)
    236               {
    237               if((senspar.temperature>=(temper+1))||(senspar.temperature<=(temper-1)) )senspar.change_par = true;
    238               if(temper >= 45) temper = 50;
    239               //if(temper <= -20) temper = -40;
    240               //if((temper>=20)&&(temper<=26)) temper = 23;
    241                senspar.temperature= temper;
    242               wright_data_to_cam(GET_TEMPERATURE_DATA, senspar.temperature);
    243               }
    244              break;
    245          
    246              case GET_PRESSURE_DATA:
    247               float press;
    248               float* press_point;
    249               press_point = &press;
    250                data = (u8*)press_point;
    251               *(data+0) = pop(&RXbuf);
    252               *(data+1) = pop(&RXbuf);
    253               *(data+2) = pop(&RXbuf);
    254               *(data+3) = pop(&RXbuf);
    255               if(senspar.press_auto)
    256               {
    257               if((senspar.pressure>=(press+1)) ||(senspar.pressure<=(press-1)) )senspar.change_par = true;
    258              // if(senspar.temperature<-20) press = 763;
    259               senspar.pressure = press;
    260               wright_data_to_cam(GET_PRESSURE_DATA, senspar.pressure);
    261               }
    262              break;
    263          
    264              case METEO_GET_INCLINATE_DATA:
    265               float incl;
    266               float* incl_point;
    267               incl_point = &incl;
    268               data = (u8*)incl_point;
    269               *(data+0) = pop(&RXbuf);
    270               *(data+1) = pop(&RXbuf);
    271               *(data+2) = pop(&RXbuf);
    272               *(data+3) = pop(&RXbuf);
    273              if(incl>=90) incl -=180;
    274              if(incl<=-90) incl +=180;
    275               //incl +=180;
    276              if((senspar.declinate>=(incl+1)) ||(senspar.declinate<=(incl-1)) )senspar.change_par = true;
    277               senspar.declinate = incl;
    278          
    279              break;
    280          
    281              case METEO_GET_DECLINATE_DATA:
    282                float decl;
    283               float* decl_point;
    284               decl_point = &decl;
    285               data = (u8*)decl_point;
    286               *(data+0) = pop(&RXbuf);
    287               *(data+1) = pop(&RXbuf);
    288               *(data+2) = pop(&RXbuf);
    289               *(data+3) = pop(&RXbuf);
    290               if(decl>=90) decl -=180;
    291               if(decl<=-90) decl +=180;
    292              // decl +=180;
    293               senspar.inclinate = decl;
    294               if((senspar.inclinate>=(decl+1)) ||(senspar.inclinate<=(decl-1)) )senspar.change_par = true;
    295               wright_data_to_cam(METEO_GET_INCLINATE_DATA, senspar.inclinate);
    296              break;
    297              
    298              case GET_COMPASS_DATA:
    299               float compasl;
    300               float* compas_point;
    301               compas_point = &compasl;
    302               data = (u8*)compas_point;
    303               *(data+0) = pop(&RXbuf);
    304               *(data+1) = pop(&RXbuf);
    305               *(data+2) = pop(&RXbuf);
    306               *(data+3) = pop(&RXbuf);
    307               //if(decl>=90) decl -=180;
    308               //if(decl<=-90) decl +=180;
    309              // decl +=180;
    310               senspar.compas = compasl;
    311               if((senspar.compas>=(compasl+1)) ||(senspar.compas<=(compasl-1)) )senspar.change_par = true;
    312          //     wright_data_to_cam(GET_PRESSURE_DATA, senspar.compas);
    313              break;
    314             }
    315           }
    316          
    317          
    318          if(adress == encoder1.adress)
    319            {  
    320              encoder1.encoder_func(command);    
    321            }
    322          
    323          
    324          
    325          if(adress == encoder0.adress)
    326            {
    327              encoder0.encoder_func(command);
    328            }
    329          
    330          
    331          
    332          // LPD protocol
    333          if(adress == ADRESS_LPD)
    334            {
    335              lpd_requests(command);
    336            }
    337          
    338           clean(&RXbuf);
    339           task_flag = false;
    340           counter_sys  = 0;
    341          }
    342          
    343          
    344          void redrow_menu_simbol()
    345          {
    346            if(!(encoder_func_buf[encoder_func_count]&encoder0_masks_buf[encoder_func_count]))
    347            {
    348                       encoder_func_count++;
    349                       if(encoder_func_count>ALL_ENCODER_FUNC) encoder_func_count=1;
    350                       while(!(encoder_func_buf[encoder_func_count]&encoder0_masks_buf[encoder_func_count]))
    351                       {
    352                        encoder_func_count++;
    353                        if(encoder_func_count>ALL_ENCODER_FUNC) encoder_func_count=1;            
    354                       }
    355                       
    356          
    357            }  
    358          
    359                push(&keys.keys_stack,  COM_NO_SYMBOL_DISP);
    360            
    361                push(&keys.keys_stack,  encoder_func_buf[encoder_func_count]);
    362                
    363                if(flash.cam_type&CONFIG_TEMP_PRESS_TEST)
    364                  {
    365                   senspar.pressure = 750;
    366                   wright_data_to_cam(GET_PRESSURE_DATA, senspar.pressure);
    367                   senspar.temperature = 15;
    368                   wright_data_to_cam(GET_TEMPERATURE_DATA, senspar.temperature);
    369                  }
    370                error_counter = 1000;
    371          }
    372          
    373          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   encoder_func_ini
       0   func_buffer_ini
      40   protocol
        40   -- Indirect call
        40   -> __aeabi_fadd
        40   -> check_crc
        40   -> clean
        40   -> del_stsp
        40   -> lpd_requests
        40   -> net_init
        40   -> net_set_default
        40   -> pop
        40   -> push
        40   -> rfu_start
        40   -> wright_data_to_cam
        40 __aeabi_cfcmple
        40 __aeabi_cfrcmple
       8   redrow_menu_simbol
         8   -> push
         8   -> wright_data_to_cam


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      12  RXbuf
      12  TXbuf
      12  ctrl_unit_masks_buf
      12  encoder0
      12  encoder0_masks_buf
      12  encoder1
      12  encoder1_masks_buf
      12  encoder_func_buf
       1  encoder_func_count
      54  encoder_func_ini
      12  encoder_minus_buf
      12  encoder_plus_buf
       2  error_counter
       1  fuck_next_command
       1  fuck_power_off_command
     266  func_buffer_ini
      12  keyBuf
    1374  protocol
     164  redrow_menu_simbol
       1  rs_frame

 
    65 bytes in section .bss
    73 bytes in section .data
 1 970 bytes in section .text
 
 1 970 bytes of CODE memory
   138 bytes of DATA memory

Errors: none
Warnings: 7
